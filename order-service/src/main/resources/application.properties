
spring.application.name=order-service
server.port=${ORDER_SERVICE_PORT:8086}
daily.farm.domain=${APPL_DOMAIN}


# Spring Cloud Stream Configuration

spring.cloud.function.definition=orderCreate;paymentCreate;orderCreated;orderCancel,paymentStatus
spring.cloud.stream.bindings.orderCreate-in-0.destination=order-create
spring.cloud.stream.bindings.orderCreate-in-0.group=order-create-group
spring.cloud.stream.bindings.orderCreate-in-0.content-type=application/json
spring.cloud.stream.bindings.orderCreate-in-0.consumer.concurrency=4

spring.cloud.stream.bindings.orderFailed-out-0.destination=order-failed
spring.cloud.stream.bindings.orderFailed-out-0.group=order-failed-group
spring.cloud.stream.bindings.orderFailed-out-0.content-type=application/json
spring.cloud.stream.bindings.orderFailed-out-0.consumer.concurrency=1

spring.cloud.stream.bindings.paymentStatus-in-0.destination=payment-status
spring.cloud.stream.bindings.paymentStatus-in-0.group=payment-status-group
spring.cloud.stream.bindings.paymentStatus-in-0.content-type=application/json
spring.cloud.stream.bindings.paymentStatus-in-0.consumer.concurrency=1

spring.cloud.stream.bindings.orderCancel-in-0.destination=order-cancel
spring.cloud.stream.bindings.orderCancel-in-0.group=order-cancel-group
spring.cloud.stream.bindings.orderCancel-in-0.content-type=application/json
spring.cloud.stream.bindings.orderCancel-in-0.consumer.concurrency=1

spring.cloud.stream.bindings.orderCreated-out-0.destination=order-created
spring.cloud.stream.bindings.orderCreated-out-0.group=order-created-group
spring.cloud.stream.bindings.orderCreated-out-0.content-type=application/json
spring.cloud.stream.bindings.orderCreated-out-0.consumer.concurrency=1


spring.cloud.stream.bindings.paymentCreate-in-0.destination=payment-create
spring.cloud.stream.bindings.paymentCreate-in-0.group=payment-create-group
spring.cloud.stream.bindings.paymentCreate-in-0.content-type=application/json
spring.cloud.stream.bindings.paymentCreate-in-0.consumer.concurrency=4

spring.cloud.stream.bindings.orderCreated-in-0.destination=order-created
spring.cloud.stream.bindings.orderCreated-in-0.group=order-created-group
spring.cloud.stream.bindings.orderCreated-in-0.content-type=application/json
spring.cloud.stream.bindings.orderCreated-in-0.consumer.concurrency=1

spring.cloud.stream.bindings.orderCancel-out-0.destination=order-cancel
spring.cloud.stream.bindings.orderCancel-out-0.group=order-cancel-group
spring.cloud.stream.bindings.orderCancel-out-0.content-type=application/json
spring.cloud.stream.bindings.orderCancel-out-0.consumer.concurrency=1

spring.cloud.stream.bindings.paymentStatus-out-0.destination=payment-status
spring.cloud.stream.bindings.paymentStatus-out-0.group=payment-status-group
spring.cloud.stream.bindings.paymentStatus-out-0.content-type=application/json
spring.cloud.stream.bindings.paymentStatus-out-0.consumer.concurrency=1

spring.cloud.stream.kafka.binder.brokers=localhost:9092

logging.level.org.springframework.cloud.stream=DEBUG
#logging.level.org.apache.kafka=DEBUG
#spring.cloud.stream.kafka.binder.configuration.acks=1
#spring.cloud.stream.kafka.binder.configuration.retries=3
#spring.cloud.stream.kafka.binder.configuration.buffer.memory=33554432
#spring.cloud.stream.kafka.binder.configuration.batch.size=16384
#spring.cloud.stream.kafka.binder.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.cloud.stream.kafka.binder.configuration.value.serializer=org.apache.kafka.common.serialization.StringSerializer





logging.level.root=INFO

logging.level.feign=DEBUG
logging.level.com.zaxxer.hikari=info

server.error.include-message=never
server.error.include-stacktrace=never
spring.jpa.hibernate.ddl-auto=update



#for postgresql
spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=${POSTGRESQL_URL}
#spring.datasource.username=${POSTGRESQL_USER}
#spring.datasource.password=${POSTGRESQL_PASSWORD}
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=1111




spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.sql.init.mode=always

spring.jpa.open-in-view=false
# HikariCP settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.pool-name=OrderServiceHikariPool


#redis
#spring.data.redis.host=${REDIS_HOST}
#spring.data.redis.port=${REDIS_PORT}
#spring.data.redis.username=${REDIS_USER}
#spring.data.redis.password=${REDIS_PASSWORD}
#spring.data.redis.timeout=60000
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.lettuce.pool.max-active=30
spring.redis.lettuce.pool.max-idle=10
spring.redis.lettuce.pool.min-idle=5
spring.redis.lettuce.pool.max-wait=-1



#for paypal
paypal.client.id=${PAYPAL_CLIENT_ID}
paypal.client.secret=${PAYPAL_SECRET_KEY}
paypal.api.url=${PAYPAL_API_URL}
paypal.mode=sandbox


